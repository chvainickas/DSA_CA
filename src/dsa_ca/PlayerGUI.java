/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package dsa_ca;

import javax.swing.JOptionPane;

/**
 *
 * @author edward
 */
public class PlayerGUI extends javax.swing.JFrame {
    private final GenrePlaylist playlist; // stores the playlist
    private Node currentSongNode; // current song "playing"

    /**
     * Creates new form PlayerGUI
     * 
     * @param playlist
     */
    public PlayerGUI(GenrePlaylist playlist) {
        initComponents();
        this.playlist = playlist; // sets the playlist
        this.currentSongNode = playlist.getHead(); // gets the first song from the genre playlist

        updateCurrentSongLabel(); // update the label that says which song is "playing"

        setVisible(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        currentSongLbl = new javax.swing.JLabel();
        currentSongNameLbl = new javax.swing.JLabel();
        rewindBtn = new javax.swing.JButton();
        forwardBtn = new javax.swing.JButton();
        closeBtn = new javax.swing.JButton();
        repeatTggl = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        currentSongLbl.setText("Now Playing:");

        currentSongNameLbl.setBackground(new java.awt.Color(102, 255, 0));

        rewindBtn.setText("‚èÆ");
        rewindBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rewindBtnActionPerformed(evt);
            }
        });

        forwardBtn.setText("‚è≠\t");
        forwardBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardBtnActionPerformed(evt);
            }
        });

        closeBtn.setText("Close Player");
        closeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtnActionPerformed(evt);
            }
        });

        repeatTggl.setText("üîÅ");
        repeatTggl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repeatTgglActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(currentSongLbl)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(currentSongNameLbl, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(rewindBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(forwardBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(repeatTggl, javax.swing.GroupLayout.PREFERRED_SIZE, 74,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(closeBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 172,
                                                        Short.MAX_VALUE)))
                                .addContainerGap()));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(currentSongNameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 23,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(currentSongLbl))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(rewindBtn)
                                        .addComponent(forwardBtn)
                                        .addComponent(closeBtn)
                                        .addComponent(repeatTggl))
                                .addContainerGap(35, Short.MAX_VALUE)));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    // to have make the dll repeateable

    private void repeatTgglActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_repeatTgglActionPerformed
        // checks if the reeat toggle button is selected
        if (repeatTggl.isSelected()) {
            // disconnects the tail from the head (repeat mode off)
            playlist.getTail().setNext(null);
            playlist.getHead().setPrev(null);
        } else {
            // connects the tail to the head (repeat mode on)
            playlist.getTail().setNext(playlist.getHead());
            playlist.getHead().setPrev(playlist.getTail());
        }
    }// GEN-LAST:event_repeatTgglActionPerformed
    // goes back a song

    private void rewindBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_rewindBtnActionPerformed
        if (currentSongNode != null && currentSongNode.getPrev() != null) {
            // moves to the previous song node
            currentSongNode = currentSongNode.getPrev();
            // updates the current song label
            updateCurrentSongLabel();
        } else {
            // checks if repeat mode is on
            if (repeatTggl.isSelected() && playlist.getTail() != null) {
                // if it is on and there is at least one song in the playlist, moves back to the
                // last song
                currentSongNode = playlist.getTail();
                // updates the current song label
                updateCurrentSongLabel();
            } else {
                // alerts the user that there are no previous songs
                JOptionPane.showMessageDialog(this, "No previous song available");
            }
        }
    }// GEN-LAST:event_rewindBtnActionPerformed
    // goes forward a song

    private void forwardBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_forwardBtnActionPerformed
        if (currentSongNode != null && currentSongNode.getNext() != null) {
            // moves to the next song node
            currentSongNode = currentSongNode.getNext();
            // updates the current song label
            updateCurrentSongLabel();
        } else {
            // checks if repeat mode is on
            if (repeatTggl.isSelected() && playlist.getHead() != null) {
                // if repeat mode is on and there is at least one song in the playlist, move
                // back to the first song
                currentSongNode = playlist.getHead();
                // updates the current song label
                updateCurrentSongLabel();
            } else {
                // alerts the user that there are no next songs
                JOptionPane.showMessageDialog(this, "No next song available");
            }
        }
    }// GEN-LAST:event_forwardBtnActionPerformed
    // closes the player

    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_closeBtnActionPerformed
        this.dispose(); // TODO add your handling code here:
    }// GEN-LAST:event_closeBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlayerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlayerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlayerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlayerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainMenuGUI mainMenuGUI = new MainMenuGUI();
                GenrePlaylist playlist = mainMenuGUI.getLoadedPlaylist();
                new PlayerGUI(playlist).setVisible(true);
            }
        });
    }

    // this function updates the label of the song
    private void updateCurrentSongLabel() {
        Node song = currentSongNode;

        // checks if the node exists and is not null
        if (song != null && song.getElement() != null) {
            // retrieves the element stored in the node
            Object element = song.getElement();

            // making sure its a song
            if (element instanceof Song) {
                // if itss a song object,update the label with song name and artist
                Song firstSong = (Song) element;
                currentSongNameLbl.setText(firstSong.getName() + " by " + firstSong.getArtist());
            } else if (element instanceof Node) {
                // if it's a mode, retrieves the song object stored within it
                Node songNode = (Node) element;
                Song firstSong = (Song) songNode.getElement();
                // update the label with the song name and artist
                currentSongNameLbl.setText(firstSong.getName() + " by " + firstSong.getArtist());
            } else {
                // default value
                currentSongNameLbl.setText("No song is currently playing");
            }
        } else {
            // default value
            currentSongNameLbl.setText("No song is currently playing");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeBtn;
    private javax.swing.JLabel currentSongLbl;
    private javax.swing.JLabel currentSongNameLbl;
    private javax.swing.JButton forwardBtn;
    private javax.swing.JToggleButton repeatTggl;
    private javax.swing.JButton rewindBtn;
    // End of variables declaration//GEN-END:variables
}
